#!/usr/bin/env node

var usage = "Dockerflow: Smooth and simple Docker image development with Ansible.\n\
\n\
Usage: dockerflow path action [options]\n\
\n\
Available actions are:\n\
  - build: Builds the image from the base image.\n\
  - rebuild: Builds the image from the current image.\n\
  - debug-build: Attempts to build the image from the base image, and leaves you in a shell\n\
    inside the container when the build completes.\n\
  - debug-rebuild: Attempts to build the image from the current image, and leaves you in a shell\n\
    inside the container when the build completes.\n\
\n\
Options override their corresponding entries in the dockerflow file (see README):\n\
  - --tag: The tag to apply to the built image.\n\
  - --base: The hash or tag of the image from which the build should start.\n\
  - --docker-options: Options to pass directly to Docker.\n\
  - --environment: A space-separated list of environmental valiables to forward into the container.\n\
  - --command: A command for the image to run automatically on startup.\n\
\n\
You can also provide the -H or --host option if your Docker daemon is running on a nonstandard socket.\n\
\n\
See the README for the dockerflow file format.\n\
\n\
NOTE: Ansible must be installed in the base image.\n\
"

var argv = require('minimist')(process.argv.slice(2));
var path = require('path');

var action = argv['_'][0];
var buildPath = path.resolve(process.cwd(), argv['_'][1]);

var actions = {
  build: true,
  rebuild: true,
  "debug-build": true,
  "debug-rebuild": true
}
if (!actions[action]) {
  throw new Error("Action " + action + " not known.")
}

require('../index')[action](buildPath, argv);